
#user  nobody;
worker_processes  2;

error_log  error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    access_log      access.log;
    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
    
	# nginx自带的两个和后端健康检查相关的模块
	# 通过调节ngx_http_proxy_module 模块中的 proxy_connect_timeout 指令、proxy_read_timeout指令，通过将他们的值调低来发现不健康节点，进而将请求往健康节点转移。
	proxy_next_upstream http_502 http_504 http_404 error timeout invalid_header;
  
	
	
	upstream backupend {
		server 127.0.0.1:8881 weight=1 max_fails=1 fail_timeout=10s;    #10秒内请求某一应用失败1次,认为该应用宕机，后等待30秒
		server 127.0.0.1:8882 weight=1;
	}
	
	server {
		listen       18848;
		server_name  localhost;
		add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
       
		location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_buffering off;
            proxy_pass http://backupend;
            proxy_connect_timeout    1800;
            proxy_read_timeout       1800;
            proxy_send_timeout       1800;
        }
	}

	

	
	# 测试10001
    server {
        listen       10001;
        server_name  localhost; 
		
		# 浏览器请求:    http://127.0.0.1:10001/proxy/html/show.html
		# 代理url, http://127.0.0.1:10001/html/show.html      根路径, 前面的请求被吃掉了, proxy_pass最后带斜杠/
		
		location /proxy/ {
		   proxy_pass   http://127.0.0.1:8001/;
		}

		# 浏览器请求:  http://127.0.0.1:10001/test/html/index.html
		# 代理url, http://127.0.0.1:10001/test/html/index.html        绝对路径,    绝对路径就是把前面都加上
		# 访问tomcat的8001端口，http://127.0.0.1:8001/test/html/index.html   返回真正的结果， 被nginx反向代理
		location /test/ {
		   proxy_pass   http://127.0.0.1:8001;
		}
		
		
		# 浏览器请求:  http://127.0.0.1:10001/test3/index.html
		# 代理url,  http://127.0.0.1:10001/test3/index.html      根路径, 前面的请求被吃掉了, proxy_pass最后带斜杠/ 
		# 访问tomcat的8001端口，http://127.0.0.1:8001/aaa/index.html   返回真正的结果， 被nginx反向代理
		location /test3/ {
		   proxy_pass   http://127.0.0.1:8001/aaa/;
		}
		
		
		# 与下面形成对比， location中最后加斜杠和不加斜杠，得到的值不一样。  不加斜杠获取的是aaa/index.html.   加斜杠获取的是aaaindex.html页面。   谨记谨记
		# 浏览器请求:  http://127.0.0.1:10001/test4/index.html
		# 访问tomcat的8001端口， http://127.0.0.1:8001/aaa/index.html
		location /test4 {
		   proxy_pass   http://127.0.0.1:8001/aaa;
		}
		
		
		# 单独打开此和上面的一并打开，返回的结果会不一致
		# 与上面一起打开，会走当前（把上面的覆盖掉），获取值
		# 单独打开上面的， 走上面获取数据。
		# 浏览器请求:  http://127.0.0.1:10001/test4/index.html
		# 代理url                                                         绝对路径， test4被吃掉了，然后在aaa上追加index.html页面
		# 访问tomcat的8081端口，http://127.0.0.1:8001/aaaindex.html
		#location /test4/ {
		#   proxy_pass   http://127.0.0.1:8001/aaa;
		#}
		
		
		# 代理前端静态html页面
		location /11 {
			root   test;
			index  index.html index.htm;
		}
		
		location /22/ {
			root   test;
			index  index.html index.htm;
		}
		
		location /aa/ {
			root  D:\VRV\nginx\nginx-1.13.12\test;
			index  index.html index.htm;
		}
		
		location / {
			root  html;
			index index.html index.htm;
		}
		
    }

	 server {
        listen       10000;
        server_name  localhost; 

        location / {
            root   D:\VRV\vap\git\webpacket_0225\dist;
            index  index.html index.htm;
        }
		
		#location /api-sap/ {
		#	proxy_pass http://192.168.118.86:9430/;
		#}
        
		# 符号~ 开头表示区分大小写的正则匹配
        location ~ /api-* {
			rewrite ^/(.*) /$1 break;
            proxy_pass   http://localhost;
        }

        
    }
	
	server {
        listen       9999;
        server_name  localhost; 

		add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
		
	    proxy_set_header Host $host; 
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
		
	    location /forbid {
			root   D:\VRV\vap\git\webpacket_0225\dist\forbid;
			index  index.html index.htm;
        }	
	# 用于代理前端的所有页面，写这里
		location /admin {
            root   D:\VRV\vap\git\webpacket_0225\dist\admin;
            index  index.html index.htm;
        }	
	     
		# 目录配置
		# 符号^~ 开头表示uri以某个常规字符串开头，理解为匹配 url路径即可
		location ^~ /static {
            root   D:\VRV\vap\git\webpacket_0225\dist;
        }
		
		#  后缀配置
		#  符号~*  开头表示不区分大小写的正则匹配
		#  符号~ 开头表示区分大小写的正则匹配
		location ~* \.(git|jpg|jpeg|png|css|js|ico)$ {
            root   D:\VRV\vap\git\webpacket_0225\dist;
        }
		
		# 代理所有前端的页面请求，js，css，static，images等
        location / {
            root   D:\VRV\vap\git\webpacket_0225\dist;
        }
		
		#location /hardware/ {
		#	root  D:\VRV\vap\git\webpacket_0225\dist;
		#	index  index.html index.htm;
		#}
		
		#location /login {
		#	root  D:\VRV\vap\git\webpacket_0225\dist;
		#	index  index.html index.htm;
		#}
		
		# 符号= 开头表示精确匹配
	    error_page 500 502 503 504 /50x.html;
        location  = /50x.html {
		   root html;
		}	
		
		error_page 403  /403.html;
		location  = /403.html {
		   root html;
		   index  403.htm;
		}	
		
		error_page 404  /404.html;
		location  = /404.html {
		   root html;
		   index  404.htm;
		}
		
		
    }
	
	
	server {
        listen       19999;
        server_name  localhost; 

		add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Headers "Origin, X-Requested-With, Content-Type, Accept";
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
		
	    proxy_set_header Host $host; 
        proxy_set_header X-Real-IP $remote_addr; 
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; 
		
	    location /forbid {
			root   D:\VRV\Doc\app-web\dist\forbid;
			index  index.html index.htm;
        }	
	# 用于代理前端的所有页面，写这里
		location /admin {
            root   D:\VRV\Doc\app-web\dist\admin;
            index  index.html index.htm;
        }	
	     
		# 目录配置
		location ^~ /static {
            root   D:\VRV\Doc\app-web\dist;
        }
		
		#  后缀配置
		location ~* \.(git|jpg|jpeg|png|css|js|ico)$ {
            root   D:\VRV\Doc\app-web\dist;
        }
		
		# 代理所有前端的页面请求，js，css，static，images等
        location / {
            root   D:\VRV\Doc\app-web\dist;
        }
		
		#location /hardware/ {
		#	root  D:\VRV\vap\git\webpacket_0225\dist;
		#	index  index.html index.htm;
		#}
		
		#location /login {
		#	root  D:\VRV\Doc\app-web\dist;
		#	index  index.html index.htm;
		#}
		
		#location /bigScreen/ {
		#	if ($request_method !~ ^(GET|POST)$ ) { 
		#		return 404; 
		#	}
        #    proxy_pass http://127.0.0.1;
        #    proxy_set_header Host $host:$server_port;
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #    proxy_set_header X-Forwarded-Proto https;
        #    proxy_redirect off;
        #    proxy_connect_timeout    1800;
        #    proxy_read_timeout       1800;
        #    proxy_send_timeout       1800;
        #}
		
		
		location /api-terminal/ {
			if ($request_method !~ ^(GET|POST)$ ) { 
				return 404; 
			}
			proxy_pass http://127.0.0.1:9580/;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto https;
            proxy_redirect off;
            proxy_connect_timeout    1800;
            proxy_read_timeout       1800;
            proxy_send_timeout       1800;
        }
		
		#location /terminal/ {
		#	if ($request_method !~ ^(GET|POST)$ ) { 
		#		return 404; 
		#	}
        #    proxy_pass http://127.0.0.1:9580/;
        #    proxy_set_header Host $host:$server_port;
        #    proxy_set_header X-Real-IP $remote_addr;
        #    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        #    proxy_set_header X-Forwarded-Proto https;
        #    proxy_redirect off;
        #    proxy_connect_timeout    1800;
        #    proxy_read_timeout       1800;
        #    proxy_send_timeout       1800;
        #}
		
	    error_page 500 502 503 504 /50x.html;
        location  = /50x.html {
		   root html;
		}	
		
		error_page 403  /403.html;
		location  = /403.html {
		   root html;
		   index  403.htm;
		}	
		
		error_page 404  /404.html;
		location  = /404.html {
		   root html;
		   index  404.htm;
		}
		
		
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

	

}